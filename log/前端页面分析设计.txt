# 各页面功能详细分析

## 1. 登录页（LoginPage）

### 功能需求

- **用户登录**
  - 输入用户名、密码和验证码。
  - 验证用户身份，获取并保存 JWT Token。
  - 登录成功后，跳转到首页。
  - 登录失败，显示错误提示。

### 使用的后端接口

- **用户登录接口**
  - **URL**: `/auth/login`
  - **方法**: `POST`
  - **请求参数**:
    - `username`：用户名
    - `password`：密码
  - **响应数据**:
    - 成功：返回 `token`、`userInfo`
    - 失败：返回错误信息

### 逻辑设计

1. **表单设计**
   - 用户名输入框
   - 密码输入框（类型为密码）
   - 验证码输入框（可选）
   - 登录按钮

2. **前端验证**
   - 检查用户名和密码是否为空。
   - （可选）验证验证码是否正确格式。

3. **发送登录请求**
   - 调用 `/auth/login` 接口，提交用户名和密码。
   - 使用 `axios` 发送 `POST` 请求。

4. **处理响应**
   - **成功**：
     - 将返回的 `token` 保存到 `localStorage` 或 `Vuex`。
     - 设置 `axios` 的请求头，添加 `Authorization`。
     - 跳转到首页。
   - **失败**：
     - 提示错误信息，如“用户名或密码错误”。

5. **错误处理**
   - 捕获请求异常，例如网络错误，给予用户提示。

---

## 2. 首页（HomePage）

### 功能需求

- **系统概览**
  - 显示关键统计数据。
- **快捷入口**
  - 常用功能的快捷访问。
- **公告或消息**
  - 显示系统公告或最新消息。

### 使用的后端接口

- **获取系统概览数据**
  - **URL**: `/dashboard/overview`
  - **方法**: `GET`
  - **请求参数**: 无
  - **响应数据**:
    - 用户总数
    - 货品总数
    - 仓库总数
    - 其他统计数据

- **获取公告消息**
  - **URL**: `/messages/latest`
  - **方法**: `GET`
  - **请求参数**: 无
  - **响应数据**:
    - 消息列表

### 逻辑设计

1. **页面加载**
   - 在组件的 `created` 钩子中，调用概览数据接口。
   - 同时调用公告消息接口。

2. **数据处理**
   - 将获取的统计数据绑定到页面组件。
   - 显示在页面上的对应位置。

3. **界面布局**
   - 上部显示统计数据。
   - 中间显示快捷入口的图标或按钮。
   - 下部显示公告消息列表。

4. **权限控制**
   - 根据用户角色或权限，显示不同的快捷入口。

---

## 3. 用户管理页（UserManagementPage）

### 功能需求

- **查看用户列表**
  - 展示所有系统用户的信息。
- **添加新用户**
  - 输入用户信息，创建新用户。
- **编辑用户**
  - 修改现有用户的信息。
- **删除用户**
  - 删除选定的用户。
- **重置密码**
  - 重置用户的密码。
- **启用/禁用用户**
  - 变更用户的启用状态。
- **分配角色**
  - 为用户分配角色。

### 使用的后端接口

- **获取所有用户**
  - **URL**: `/users`
  - **方法**: `GET`

- **添加用户**
  - **URL**: `/users`
  - **方法**: `POST`
  - **请求参数**: 用户信息

- **更新用户信息**
  - **URL**: `/users`
  - **方法**: `PUT`
  - **请求参数**: 用户信息

- **删除用户**
  - **URL**: `/users/{userId}`
  - **方法**: `DELETE`

- **重置密码**
  - **URL**: `/users/resetPassword`
  - **方法**: `POST`
  - **请求参数**:
    - `userId`
    - `password`

- **启用用户**
  - **URL**: `/users/enable/{userId}`
  - **方法**: `POST`

- **禁用用户**
  - **URL**: `/users/disable/{userId}`
  - **方法**: `POST`

- **获取所有角色**
  - **URL**: `/roles`
  - **方法**: `GET`

- **分配角色**
  - **URL**: `/users/assignRoles`
  - **方法**: `POST`
  - **请求参数**:
    - `userId`
    - `roleIds`（角色ID列表）

### 逻辑设计

1. **用户列表显示**
   - 在页面加载时，调用 `/users` 接口获取用户列表。
   - 使用表格（如 `el-table`）展示用户信息。

2. **添加新用户**
   - 点击“添加”按钮，弹出对话框（`el-dialog`）。
   - 填写用户信息，包括账号名、用户名、密码、角色等。
   - 点击“保存”时，调用 `/users` 的 `POST` 方法添加用户。
   - 成功后刷新用户列表。

3. **编辑用户**
   - 在用户列表中，提供“编辑”按钮。
   - 点击后，弹出对话框，填充用户信息。
   - 修改信息后，调用 `/users` 的 `PUT` 方法更新用户信息。
   - 成功后刷新用户列表。

4. **删除用户**
   - 在用户列表中，提供“删除”按钮。
   - 点击后，弹出确认提示。
   - 确认后，调用 `/users/{userId}` 的 `DELETE` 方法删除用户。
   - 成功后刷新用户列表。

5. **重置密码**
   - 在用户列表中，提供“重置密码”按钮。
   - 点击后，弹出输入新密码的对话框。
   - 调用 `/users/resetPassword` 接口重置密码。

6. **启用/禁用用户**
   - 在用户列表中，提供“启用”或“禁用”按钮。
   - 根据当前状态显示不同按钮。
   - 调用对应的启用或禁用接口。

7. **分配角色**
   - 在添加和编辑用户时，提供角色选择。
   - 获取角色列表，调用 `/roles` 接口。
   - 将选中的角色ID列表提交到 `/users/assignRoles` 接口。

8. **权限控制**
   - 只有超级管理员可以访问用户管理页。
   - 在路由或组件加载时，检查用户权限。

---

## 4. 个人信息页（ProfilePage）

### 功能需求

- **查看个人信息**
  - 显示当前用户的详细信息。
- **修改个人信息**
  - 更新用户名、联系方式等信息。
- **修改密码**
  - 修改登录密码。

### 使用的后端接口

- **获取当前用户信息**
  - **URL**: `/users/current`
  - **方法**: `GET`

- **更新用户信息**
  - **URL**: `/users`
  - **方法**: `PUT`
  - **请求参数**: 用户信息

- **修改密码**
  - **URL**: `/users/changePassword`
  - **方法**: `POST`
  - **请求参数**:
    - `oldPassword`
    - `newPassword`

### 逻辑设计

1. **显示个人信息**
   - 调用 `/users/current` 接口，获取当前用户信息。
   - 显示在页面上。

2. **修改个人信息**
   - 在信息旁边提供“编辑”按钮。
   - 点击进入编辑模式，允许修改可编辑字段。
   - 提交时，调用 `/users` 的 `PUT` 方法更新信息。

3. **修改密码**
   - 提供“修改密码”按钮或选项卡。
   - 输入旧密码、新密码、确认密码。
   - 验证新密码和确认密码是否一致。
   - 调用 `/users/changePassword` 接口提交修改。

4. **处理响应**
   - **成功**：
     - 提示修改成功。
     - 可能需要重新登录。
   - **失败**：
     - 提示错误信息，如“旧密码不正确”。

---

## 5. 企业信息页（CompanyInfoPage）

### 功能需求

- **查看企业基本信息**
  - 显示企业名称、地址、联系人、联系方式等。
- **修改企业信息**
  - 更新企业的基本资料。

### 使用的后端接口

- **获取企业信息**
  - **URL**: `/company/{companyId}`
  - **方法**: `GET`

- **更新企业信息**
  - **URL**: `/company`
  - **方法**: `PUT`
  - **请求参数**: 企业信息

### 逻辑设计

1. **显示企业信息**
   - 在页面加载时，调用 `/company/{companyId}` 接口获取企业信息。
   - 显示在页面上。

2. **修改企业信息**
   - 提供“编辑”按钮。
   - 点击后进入编辑模式，可以修改字段。
   - 提交时，调用 `/company` 的 `PUT` 方法更新信息。

3. **权限控制**
   - 只有信息管理员可以修改企业信息。
   - 超级管理员和信息管理员可以查看。

4. **处理响应**
   - **成功**：
     - 提示更新成功。
   - **失败**：
     - 显示错误信息。

---

## 6. 仓库管理页（WarehouseManagementPage）

### 功能需求

- **查看仓库列表**
  - 显示所有仓库的信息。
- **添加仓库**
  - 创建新的仓库。
- **编辑仓库**
  - 修改仓库信息。
- **删除仓库**
  - 删除选定仓库（需确保仓库内无货品）。

### 使用的后端接口

- **获取所有仓库**
  - **URL**: `/warehouses`
  - **方法**: `GET`

- **添加仓库**
  - **URL**: `/warehouses`
  - **方法**: `POST`
  - **请求参数**: 仓库信息

- **更新仓库信息**
  - **URL**: `/warehouses`
  - **方法**: `PUT`
  - **请求参数**: 仓库信息

- **删除仓库**
  - **URL**: `/warehouses/{warehouseId}`
  - **方法**: `DELETE`

### 逻辑设计

1. **仓库列表展示**
   - 在页面加载时，调用 `/warehouses` 接口获取仓库列表。
   - 使用表格显示仓库名称、地址、负责人等信息。

2. **添加仓库**
   - 点击“添加”按钮，弹出对话框。
   - 输入仓库名称、地址等信息。
   - 提交时，调用 `/warehouses` 的 `POST` 方法。

3. **编辑仓库**
   - 在列表中提供“编辑”按钮。
   - 点击后，弹出对话框，显示仓库信息供修改。
   - 提交时，调用 `/warehouses` 的 `PUT` 方法。

4. **删除仓库**
   - 在列表中提供“删除”按钮。
   - 点击后，弹出确认提示。
   - 调用 `/warehouses/{warehouseId}` 的 `DELETE` 方法。
   - 删除前需检查仓库是否存在货品库存。

5. **库存检查**
   - 可以在前端请求仓库的库存情况，确认仓库是否可删除。

6. **权限控制**
   - 只有信息管理员可以访问仓库管理页。

---

## 7. 货品类别管理页（CategoryManagementPage）

### 功能需求

- **查看货品类别列表**
  - 显示所有货品类别。
- **添加货品类别**
  - 创建新的类别。
- **编辑货品类别**
  - 修改类别信息。
- **删除货品类别**
  - 删除选定的类别（需确保类别下无货品）。

### 使用的后端接口

- **获取所有类别**
  - **URL**: `/categories`
  - **方法**: `GET`

- **添加类别**
  - **URL**: `/categories`
  - **方法**: `POST`
  - **请求参数**: 类别信息

- **更新类别信息**
  - **URL**: `/categories`
  - **方法**: `PUT`
  - **请求参数**: 类别信息

- **删除类别**
  - **URL**: `/categories/{categoryId}`
  - **方法**: `DELETE`

### 逻辑设计

1. **类别列表展示**
   - 调用 `/categories` 接口获取数据。
   - 使用列表或表格显示类别名称、描述等。

2. **添加类别**
   - 点击“添加”按钮，弹出对话框。
   - 输入类别名称、描述等。
   - 提交时，调用 `/categories` 的 `POST` 方法。

3. **编辑类别**
   - 在列表中提供“编辑”按钮。
   - 弹出对话框，修改类别信息。
   - 提交时，调用 `/categories` 的 `PUT` 方法。

4. **删除类别**
   - 在列表中提供“删除”按钮。
   - 确认后，调用 `/categories/{categoryId}` 的 `DELETE` 方法。
   - 删除前需检查该类别下是否有货品。

5. **货品检查**
   - 可以在前端请求该类别下的货品数量，判断是否可删除。

6. **权限控制**
   - 只有信息管理员可以访问该页面。

---

## 8. 货品信息管理页（ProductManagementPage）

### 功能需求

- **查看货品列表**
  - 显示所有货品的信息。
- **添加货品**
  - 创建新的货品。
- **编辑货品**
  - 修改货品信息。
- **删除货品**
  - 删除选定的货品。
- **库存调整**
  - 手动调整货品在仓库中的库存数量。
- **上传图片**
  - 上传或更新货品的图片。

### 使用的后端接口

- **获取所有货品**
  - **URL**: `/products`
  - **方法**: `GET`

- **添加货品**
  - **URL**: `/products`
  - **方法**: `POST`
  - **请求参数**: 货品信息

- **更新货品信息**
  - **URL**: `/products`
  - **方法**: `PUT`
  - **请求参数**: 货品信息

- **删除货品**
  - **URL**: `/products/{productId}`
  - **方法**: `DELETE`

- **调整库存**
  - **URL**: `/products/adjustStock`
  - **方法**: `POST`
  - **请求参数**:
    - `productId`
    - `warehouseId`
    - `quantity`

- **上传货品图片**
  - **URL**: `/products/uploadImage`
  - **方法**: `POST`
  - **请求参数**:
    - `productId`
    - `imageFile`

### 逻辑设计

1. **货品列表展示**
   - 调用 `/products` 接口获取货品列表。
   - 显示货品名称、价格、类别、库存等信息。
   - 可以添加筛选和搜索功能。

2. **添加货品**
   - 点击“添加”按钮，弹出对话框。
   - 输入货品名称、价格、选择类别等。
   - 上传图片，可以使用文件上传组件。
   - 提交时，调用 `/products` 的 `POST` 方法。

3. **编辑货品**
   - 在列表中提供“编辑”按钮。
   - 弹出对话框，修改货品信息。
   - 提交时，调用 `/products` 的 `PUT` 方法。

4. **删除货品**
   - 在列表中提供“删除”按钮。
   - 确认后，调用 `/products/{productId}` 的 `DELETE` 方法。

5. **库存调整**
   - 在列表中提供“库存调整”按钮。
   - 弹出对话框，选择仓库，输入调整数量（正数增加，负数减少）。
   - 提交时，调用 `/products/adjustStock` 接口。

6. **上传图片**
   - 在添加或编辑货品时，提供图片上传功能。
   - 使用 `el-upload` 组件，上传后获取文件路径。
   - 调用 `/products/uploadImage` 接口，将图片路径关联到货品。

7. **权限控制**
   - 只有信息管理员可以访问该页面。

---

## 9. 出入库管理页（InventoryManagementPage）

### 功能需求

- **查看出入库记录**
  - 显示所有出入库操作的记录。
- **货品出库**
  - 登记货品的出库操作，减少库存。
- **货品入库**
  - 登记货品的入库操作，增加库存。
- **调货**
  - 从一个仓库调拨货品到另一个仓库。

### 使用的后端接口

- **获取库存记录**
  - **URL**: `/inventory/records`
  - **方法**: `GET`

- **根据条件获取库存记录**
  - **URL**: `/inventory/records/conditions`
  - **方法**: `GET`
  - **请求参数**:
    - `startTime`
    - `endTime`
    - `productId`
    - `warehouseId`
    - `operationType`

- **货品入库**
  - **URL**: `/inventory/stockIn`
  - **方法**: `POST`
  - **请求参数**: `InventoryRecord` 对象

- **货品出库**
  - **URL**: `/inventory/stockOut`
  - **方法**: `POST`
  - **请求参数**: `InventoryRecord` 对象

- **调货**
  - **URL**: `/inventory/transfer`
  - **方法**: `POST`
  - **请求参数**:
    - `outRecord`（出库记录）
    - `inRecord`（入库记录）

### 逻辑设计

1. **出入库记录展示**
   - 调用 `/inventory/records` 接口获取记录。
   - 使用表格展示，提供筛选条件。

2. **货品入库**
   - 点击“入库”按钮，弹出对话框。
   - 选择货品、仓库，输入数量、对接人等信息。
   - 提交时，调用 `/inventory/stockIn` 接口。

3. **货品出库**
   - 点击“出库”按钮，弹出对话框。
   - 选择货品、仓库，输入数量、对接人等信息。
   - 提交时，调用 `/inventory/stockOut` 接口。

4. **调货**
   - 点击“调货”按钮，弹出对话框。
   - 选择货品、源仓库、目标仓库，输入数量。
   - 提交时，调用 `/inventory/transfer` 接口。

5. **库存校验**
   - 出库和调货时，需检查库存是否足够。
   - 在提交前，可以调用库存查询接口，或在后端验证。

6. **权限控制**
   - 信息管理员可以访问该页面。

---

## 10. 权限管理页（PermissionManagementPage）

### 功能需求

- **分配菜单权限**
  - 为角色分配可访问的菜单和功能模块。
- **设置用户仓库权限**
  - 为用户分配可操作的仓库。

### 使用的后端接口

- **获取所有权限**
  - **URL**: `/permissions`
  - **方法**: `GET`

- **获取所有角色**
  - **URL**: `/roles`
  - **方法**: `GET`

- **获取角色的权限**
  - **URL**: `/roles/{roleId}/permissions`
  - **方法**: `GET`

- **为角色分配权限**
  - **URL**: `/roles/{roleId}/permissions`
  - **方法**: `POST`
  - **请求参数**: 权限ID列表

- **获取用户的仓库权限**
  - **URL**: `/users/{userId}/warehouses`
  - **方法**: `GET`

- **为用户分配仓库权限**
  - **URL**: `/users/{userId}/warehouses`
  - **方法**: `POST`
  - **请求参数**: 仓库ID列表

### 逻辑设计

1. **分配菜单权限**
   - 显示角色列表，选择要编辑的角色。
   - 调用 `/permissions` 获取所有权限，构建权限树。
   - 调用 `/roles/{roleId}/permissions` 获取角色已有的权限。
   - 用户在前端勾选权限，提交时调用 `/roles/{roleId}/permissions` 的 `POST` 方法。

2. **设置用户仓库权限**
   - 显示用户列表，选择要编辑的用户。
   - 调用 `/warehouses` 获取所有仓库列表。
   - 调用 `/users/{userId}/warehouses` 获取用户已有的仓库权限。
   - 用户勾选仓库，提交时调用 `/users/{userId}/warehouses` 的 `POST` 方法。

3. **前端展示**
   - 使用树形控件展示权限和仓库列表。
   - 提供全选、反选等功能。

4. **权限控制**
   - 只有超级管理员可以访问权限管理页。

---

## 11. 数据统计分析页（StatisticsPage）

### 功能需求

- **企业层面统计（数据统计分析1）**
  - 统计企业每天货品的进出情况，展示折线图。
  - 统计企业进出货物数量前十排行，列表显示。

- **各仓库统计（数据统计分析2）**
  - 统计各仓库每天货品的进出情况，展示折线图。
  - 统计各仓库进出货物数量前十排行，列表显示。

### 使用的后端接口

- **获取企业货品进出统计数据**
  - **URL**: `/statistics/company/overview`
  - **方法**: `GET`
  - **请求参数**:
    - `startTime`
    - `endTime`

- **获取企业货物排行数据**
  - **URL**: `/statistics/company/topProducts`
  - **方法**: `GET`
  - **请求参数**:
    - `startTime`
    - `endTime`

- **获取仓库货品进出统计数据**
  - **URL**: `/statistics/warehouse/{warehouseId}/overview`
  - **方法**: `GET`
  - **请求参数**:
    - `startTime`
    - `endTime`

- **获取仓库货物排行数据**
  - **URL**: `/statistics/warehouse/{warehouseId}/topProducts`
  - **方法**: `GET`
  - **请求参数**:
    - `startTime`
    - `endTime`

### 逻辑设计

1. **企业层面统计**

   - **时间范围选择**
     - 提供日期选择控件，选择统计的时间段。

   - **获取统计数据**
     - 调用 `/statistics/company/overview` 接口，获取每日进出数量数据。
     - 数据格式适配图表组件，如 ECharts。

   - **展示折线图**
     - 使用图表组件，展示每日进出数量的折线图。

   - **获取排行数据**
     - 调用 `/statistics/company/topProducts` 接口，获取排行列表。

   - **展示排行列表**
     - 使用表格显示货品名称、进出数量。

2. **各仓库统计**

   - **仓库选择**
     - 提供仓库选择下拉框。

   - **获取统计数据**
     - 调用 `/statistics/warehouse/{warehouseId}/overview` 接口。

   - **展示折线图**
     - 同企业层面统计。

   - **获取排行数据**
     - 调用 `/statistics/warehouse/{warehouseId}/topProducts` 接口。

   - **展示排行列表**
     - 同企业层面统计。

3. **权限控制**

   - 数据统计分析1：信息管理员和超级管理员可以查看。
   - 数据统计分析2：只有超级管理员可以查看。

4. **前端处理**

   - 对获取的数据进行处理，适配图表组件的格式。
   - 处理无数据的情况，给予提示。

---

## 12. 系统日志管理页（LogManagementPage）

### 功能需求

- **查看系统日志**
  - 显示用户的操作日志。
- **筛选日志**
  - 按用户、操作类型、时间范围等条件筛选日志。

### 使用的后端接口

- **获取所有日志**
  - **URL**: 

logs


  - **方法**: `GET`

- **根据条件获取日志**
  - **URL**: `/logs/conditions`
  - **方法**: `GET`
  - **请求参数**:
    - `userId`
    - `operationType`
    - `startTime`
    - `endTime`

### 逻辑设计

1. **日志列表展示**
   - 调用 

logs

 或 `/logs/conditions` 接口获取日志数据。
   - 使用表格显示，包含操作用户、操作内容、时间、IP等信息。

2. **筛选功能**
   - 提供筛选条件输入，包括用户、操作类型、时间范围。
   - 选择条件后，调用 `/logs/conditions` 接口获取数据。

3. **分页显示**
   - 日志数据量大，使用分页控件展示。

4. **权限控制**
   - 超级管理员和信息管理员可以访问日志管理页。

---

## 13. 错误页（ErrorPage）

### 功能需求

- **显示错误信息**
  - 当用户访问未授权或不存在的页面时，显示相应的错误提示。

### 逻辑设计

1. **路由配置**
   - 在路由中配置 404 和 403 路由。

2. **页面设计**
   - 设计友好的错误页面，提供返回首页或登录页的链接。

3. **错误拦截**
   - 在全局路由守卫中，处理未授权访问，跳转到 403 页面。
   - 处理未匹配的路由，跳转到 404 页面。

---

# 总结

以上是对各个页面的功能需求、使用的后端接口以及逻辑设计的详细分析。通过逐步细化每个功能点，明确了前端需要实现的具体内容和与后端的交互方式。这将有助于前后端开发的对接，提高开发效率，确保系统功能完整、逻辑清晰。