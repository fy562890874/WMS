我将详细说明如何在Vue3项目中实现JWT认证机制，包括以下几个部分：

1. 创建请求拦截器
2. 实现用户状态管理
3. 登录页面实现
4. 路由守卫配置

### 1. 创建API请求工具（axios封装）

```typescript
import axios from 'axios'
import { useUserStore } from '@/stores/user'
import router from '@/router'

const request = axios.create({
    baseURL: import.meta.env.VITE_API_URL,
    timeout: 5000
})

// 请求拦截器
request.interceptors.request.use(
    config => {
        const token = localStorage.getItem('token')
        if (token) {
            config.headers.Authorization = `Bearer ${token}`
        }
        return config
    },
    error => {
        return Promise.reject(error)
    }
)

// 响应拦截器
request.interceptors.response.use(
    response => {
        const { code, message, data } = response.data
        
        // 请求成功
        if (code === 200) {
            return data
        }
        
        // 处理错误
        ElMessage.error(message || '请求失败')
        return Promise.reject(new Error(message))
    },
    error => {
        if (error.response.status === 401) {
            const userStore = useUserStore()
            userStore.logout()
            router.push('/login')
        }
        ElMessage.error(error.message || '请求失败')
        return Promise.reject(error)
    }
)

export default request
```

### 2. 用户状态管理（Pinia Store）

```typescript
import { defineStore } from 'pinia'
import { ref } from 'vue'
import request from '@/utils/request'

export const useUserStore = defineStore('user', () => {
    const token = ref(localStorage.getItem('token') || '')
    const userInfo = ref(null)

    // 登录
    const login = async (username: string, password: string) => {
        try {
            const res = await request.post('/auth/login', {
                username,
                password
            })
            token.value = res.token
            userInfo.value = res.userInfo
            localStorage.setItem('token', res.token)
            return true
        } catch (error) {
            return false
        }
    }

    // 退出登录
    const logout = () => {
        token.value = ''
        userInfo.value = null
        localStorage.removeItem('token')
    }

    // 获取用户信息
    const getUserInfo = async () => {
        if (userInfo.value) return userInfo.value
        try {
            const res = await request.get('/users/info')
            userInfo.value = res
            return res
        } catch (error) {
            return null
        }
    }

    return {
        token,
        userInfo,
        login,
        logout,
        getUserInfo
    }
})
```

### 3. 登录页面实现

```vue
<!-- filepath: /src/views/login.vue -->
<template>
  <div class="login-container">
    <el-form :model="loginForm" :rules="rules" ref="loginFormRef">
      <el-form-item prop="username">
        <el-input v-model="loginForm.username" placeholder="用户名" />
      </el-form-item>
      <el-form-item prop="password">
        <el-input v-model="loginForm.password" type="password" placeholder="密码" />
      </el-form-item>
      <el-button type="primary" @click="handleLogin" :loading="loading">
        登录
      </el-button>
    </el-form>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive } from 'vue'
import { useRouter } from 'vue-router'
import { useUserStore } from '@/stores/user'

const router = useRouter()
const userStore = useUserStore()
const loading = ref(false)

const loginForm = reactive({
    username: '',
    password: ''
})

const rules = {
    username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],
    password: [{ required: true, message: '请输入密码', trigger: 'blur' }]
}

const handleLogin = async () => {
    loading.value = true
    try {
        const success = await userStore.login(
            loginForm.username,
            loginForm.password
        )
        if (success) {
            ElMessage.success('登录成功')
            router.push('/')
        }
    } finally {
        loading.value = false
    }
}
</script>
```

### 4. 路由守卫配置

```typescript
import { createRouter, createWebHistory } from 'vue-router'
import { useUserStore } from '@/stores/user'

const router = createRouter({
    history: createWebHistory(),
    routes: [
        {
            path: '/login',
            name: 'Login',
            component: () => import('@/views/login.vue'),
            meta: { requiresAuth: false }
        },
        {
            path: '/',
            component: () => import('@/layouts/default.vue'),
            meta: { requiresAuth: true },
            children: [
                // 其他需要认证的路由...
            ]
        }
    ]
})

// 全局前置守卫
router.beforeEach(async (to, from, next) => {
    const userStore = useUserStore()
    
    if (to.meta.requiresAuth) {
        // 检查是否已登录
        if (!userStore.token) {
            next({ name: 'Login', query: { redirect: to.fullPath } })
            return
        }
        
        // 获取用户信息
        if (!userStore.userInfo) {
            try {
                await userStore.getUserInfo()
            } catch (error) {
                userStore.logout()
                next({ name: 'Login', query: { redirect: to.fullPath } })
                return
            }
        }
    }
    
    next()
})

export default router
```

### 5. 环境配置文件

```env
VITE_API_URL=http://localhost:8080/api
```

### 使用示例

```vue
<!-- filepath: /src/components/UserProfile.vue -->
<template>
  <div class="user-profile">
    <div v-if="userStore.userInfo">
      <h2>欢迎, {{ userStore.userInfo.username }}</h2>
      <el-button @click="handleLogout">退出登录</el-button>
    </div>
  </div>
</template>

<script setup lang="ts">
import { useUserStore } from '@/stores/user'
import { useRouter } from 'vue-router'

const userStore = useUserStore()
const router = useRouter()

const handleLogout = () => {
    userStore.logout()
    router.push('/login')
}
</script>
```

主要功能说明：
1. 统一的请求拦截器自动添加token
2. 统一的响应拦截器处理token失效
3. 用户状态集中管理
4. 路由守卫确保需要认证的页面受保护
5. 登录状态持久化存储

使用建议：
1. 使用TypeScript增加代码可维护性
2. 使用Pinia进行状态管理
3. 使用Vue Router做路由控制
4. 使用Element Plus作为UI组件库
5. 使用Vite作为构建工具

这套机制能够保证：
1. 未登录用户无法访问需要认证的页面
2. Token失效时自动跳转到登录页
3. 登录状态持久化
4. 统一的请求错误处理
5. 用户信息的统一管理